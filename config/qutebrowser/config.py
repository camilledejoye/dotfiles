# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)
config.source("themes/default.py")

config.set('content.cookies.accept', 'all', 'chrome-devtools://*')
config.set('content.cookies.accept', 'all', 'devtools://*')

config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version} Edg/{upstream_browser_version}', 'https://accounts.google.com/*')
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

config.set('content.images', True, 'chrome-devtools://*')
config.set('content.images', True, 'devtools://*')

config.set('content.javascript.enabled', True, 'chrome-devtools://*')
config.set('content.javascript.enabled', True, 'devtools://*')
config.set('content.javascript.enabled', True, 'chrome://*/*')
config.set('content.javascript.enabled', True, 'qute://*/*')

config.set('content.register_protocol_handler', True, 'https://mail.google.com?extsrc=mailto&url=%25s')

c.downloads.location.directory = '~/Downloads'
c.downloads.location.prompt = False
c.downloads.location.remember = False
c.downloads.remove_finished = 3000

c.downloads.open_dispatcher = 'xdg-open'

# Editor (and arguments) to use for the `edit-*` commands. The following
# placeholders are defined:  * `{file}`: Filename of the file to be
# edited. * `{line}`: Line in which the caret is found in the text. *
# `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['nvim', '{file}', '+n{line}', '-c normal {column0}l']

c.hints.padding = {'bottom': 0, 'left': 3, 'right': 3, 'top': 0}

c.keyhint.delay = 500

# Enable smooth scrolling for web pages. Note smooth scrolling does not
# work with the `:scroll-px` command.
# Type: Bool
c.scrolling.smooth = False

c.spellcheck.languages = ['en-US', 'fr-FR']

c.statusbar.show = 'always'

c.tabs.background = True
c.tabs.position = 'top'
c.tabs.show = 'always'

c.url.searchengines = {
    'DEFAULT': 'https://duckduckgo.com/?q={}',
    'aw': 'https://wiki.archlinux.org?search={}',
    'ggl': 'https://google.com/search?q={}',
    'gh': 'https://github.com/search?q={}',
    'tr': 'https://translate.google.com/?sl=auto&tl=en&text={}%0A&op=translate',
}

c.colors.webpage.bg = None

c.colors.webpage.preferred_color_scheme = 'dark'

# Bindings for normal mode
config.bind('0', 'scroll-to-perc --horizontal 0')
config.bind('^', 'scroll-to-perc --horizontal 0')
config.bind('$', 'scroll-to-perc --horizontal 100')
config.bind('<Ctrl+e>', 'scroll down')
config.bind('<Ctrl+y>', 'scroll up')
config.bind('<Ctrl+o>', 'back')
config.bind('<Ctrl+i>', 'forward')
config.unbind('J')
config.bind('gT', 'tab-prev')
config.bind('gt', 'tab-next')
config.bind('yos', 'config-cycle statusbar.show always never')
config.bind('yot', 'config-cycle tabs.show always switching')
config.bind('yox', 'config-cycle statusbar.show always never ;; config-cycle tabs.show always switching')

# Bindings for command mode
config.bind('<Ctrl+n>', 'completion-item-focus next', mode='command')
config.bind('<Ctrl+p>', 'completion-item-focus prev', mode='command')
