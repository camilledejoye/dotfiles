[user]
    name = Camille Dejoye
    email = camilledejoye@gmail.com
[core]
    editor = nvim
    whitespace = -trailing-space,-indent-with-non-tab,-tab-in-indent
    excludesfile = ~/.gitignore
[color]
    status = auto
    branch = auto
    interactive = auto
    diff = auto
[alias]
    st = status -s -b
    sts = !git st
    fst = "!git fetch && git status"

    df = diff -w
    dfs = !git df --staged
    mt = mergetool

    ck = checkout
    pr = pull --rebase --autostash

    lg = log --date=short --format=format:'%C(auto)%h %cd %C(blue)%an%C(reset)%C(auto) %d %s' --graph
    la = !git lg --all
    l = !git lg @{upstream}..HEAD

    ignored = !git ls-files -v | grep '^[[:lower:]]'
    commit-amend = commit --amend --reuse-message=HEAD

    #
    # Working with branches
    #

    # Get the current branch name (not so useful in itself, but used in
    # other aliases)
    branch-name = !git rev-parse --abbrev-ref HEAD
    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = "!f() { git push -u ${1:-origin} ${2:-$(git branch-name)}; }; f"
    # Delete the remote version of the current branch
    unpublish = "!f() { git push -u ${1:-origin} :${2:-$(git branch-name)}; }; f"
    # Delete a branch and recreate it from master â€” useful if you have, say,
    # a development branch and a master branch and they could conceivably go
    # out of sync
    recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

    # Fire up your difftool (e.g. Kaleidescope) with all the changes that
    # are on the current branch.
    code-review = "!f () { echo git difftool ${1:-'@{upstream}'}...${2:-HEAD}; }; f"

    # Given a merge commit, find the span of commits that exist(ed) on that
    # branch. Again, not so useful in itself, but used by other aliases.
    merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%p | sed \"s/ /$1/\"); }; f"

    # Find the commits that were introduced by a merge
    merge-log = "!f() { git lg $(git merge-span .. $1); }; f"
    # Show the changes that were introduced by a merge
    merge-diff = "!f() { git df $(git merge-span ... $1); }; f"
    # As above, but in your difftool
    merge-difftool = "!f() { git difftool -y $(git merge-span ... $1); }; f"

    #
    # Working with files
    #

    # Unstage any files that have been added to the staging area
    unstage = reset HEAD

    # Mark a file as "assume unchanged", which means that Git will treat it
    # as though there are no changes to it even if there are. Useful for
    # temporary changes to tracked files
    assume = update-index --assume-unchanged
    # Reverse the above
    unassume = update-index --no-assume-unchanged
    # Show the files that are currently assume-unchanged
    assumed = !git ls-files -v | grep ^h | cut -c 3-

    # Checkout our version of a file and add it
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    # Checkout their version of a file and add it
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
[push]
    default = simple
[merge]
    tool = fugitive
[rebase]
    autoStash = true
[mergetool "fugitive"]
    cmd = nvim -c \"Gdiff!\" \"$MERGED\"
[grep]
    lineNumber = true
    fallbackToNoIndex = true
[remote]
    pushDefault = origin
